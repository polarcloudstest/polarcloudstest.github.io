[ { "title": "PowerShell Credential Handling", "url": "/posts/powershell-credential-handling/", "categories": "", "tags": "Pro-Tip, PowerShell", "date": "2022-08-02 01:00:00 +0100", "snippet": "One of the things I like to do on this site is to share handy PowerShell scripts.After all PowerShell allows for automation thus making life easier and who wouldn’t want an easy life?Quite often PowerShell scripts need to pass credentials to remote systems/services; for example logging onto an ESXi host or a vCenter server to perform a task or two.How do we handle those credentials? Preferably not in plain text…Enter Credential Manager.Credential ManagerCredential Manager is accessed via Windows control panel:The advantages of using Credential Manager to store our PowerShell credentials are as follows:Credentials stored in credential manager are: Associated with each Windows user account and not transferable between users Not generally transferable between computers (possible if using roaming profiles) Accessible from a full-windows environment that has Credential Manager built in (EG not in WinPE) Relatively easily accessible from PowerShellTo expand on points 1. and 2. above, remember when running a PowerShell script containing credentials, the credentials referenced must be available to the user account running the script. For example, when running a PowerShell script as a scheduled task running under the local administrator account, the credentials must be available to the local administrator account used.PowerShell Module InstallationTo access credentials stored in Credential Manager from PowerShell we need to install a PowerShell Module. The module is available here in the PowerShell Gallery.Installation is simple enough:Install-Module -Name CredentialManagerThat’s it. Restart your PowerShell session to automatically load the module.Saving CredentialsInstead of using Credential Manager GUI to add credentials, the New-StoredCredential command can be used as follows.As a bonus, teaming New-StoredCredential with Get-Credential pops up the credential request window for easy entry:New-StoredCredential -Target \"TEST\" -Persist \"LocalMachine\" -Credentials $(Get-Credential) | Out-NullEnter credentials as normal and click OK.Checking Credential Manager afterwards:Retrieving CredentialsAgain using PowerShell, credentials can be retrieved using Get-StoredCredential command as follows:Get-StoredCredential -Target \"TEST\"Using CredentialsSo how do we use the credentials that we can recover from Credential Manager? For example, how can we use the recovered credentials to, say, logon to a VMware vCenter server?In the following example, we will recover and use the following credential:The two line script is as follows:$Credentials = Get-StoredCredential -Target \"vSphere-Admin\"Connect-VIServer -Server \"vcenter.local\" -Credential $CredentialsYep that works nicely:Simple!Deleting CredentialsFinally, credentials can be deleted using Remove-StoredCredential command as follows:Remove-StoredCredential -Target \"TEST\"Checking Credential Manager:Yep, our test credential has been deleted.PowerShell Core on LinuxAs Linux does not have a equivalent Credential Manager, we need to get creative when handling credentials in PowerShell core on Linux.As luck would have it, a work around is available. What’s more is that we documented and used the workaround in part three of the UPS Triggered Shut Down of ESXi from Raspberry Pi series HERE.)Conclusion and Wrap UpA solution to implement and manage PowerShell credentials does exist. What’s more it’s simple to use.No more storing credentials in plain text inside scripts.-Chris" }, { "title": "UPS Triggered Shut Down of ESXi from Raspberry Pi - Part 3", "url": "/posts/esxi-rpi-ups-pt3/", "categories": "", "tags": "Pro-Tip, VMware, Deployment, ESXi, Linux", "date": "2022-07-23 01:00:00 +0100", "snippet": "Sorry about the tardiness of this post. I had it written, lost it and then found it again…Last time year we looked at our Uninterruptible Power Supply (UPS) hardware setup and the installation of the required software for our solution. If you’ve not seen that post, catch up now. It’s a great read. :wink:As mentioned, this post is part 3 of a multipart series. Find the other parts here: Part 1: Hardware, Requirement, Software, Solution) Part 2: Hardware Connectivity and Software Installation) Part 3: This part - Scripting for the win… or should that be for the failure?First off a solution refresher of what we are trying to achieve in this series.Solution (Refresher) Mains electricity fails… power cut! The UPS signals to the Raspberry Pi that there is a power cut The UPS signals its battery charge state to the Raspberry Pi The UPS battery charge falls below a predetermined threshold and signals this to the Raspberry Pi The Raspberry Pi runs a script to shut down all powered on VMs The Raspberry Pi runs a script to shut down the ESXi host The Raspberry Pi runs a script to shut itself down The UPS stops supplying power from battery and shuts down which also shuts down the modem, router and network switchLet’s get to it.Script OverviewLets look at what we need our script to achieve. Quite simple when we boil it down: Login to ESXi Find and shutdown all powered on VMs Shutdown ESXi server Shutdown Raspberry PiSimples!First a couple of notes:PowerShell Credential HandlingAs the PowerShell script will run in unattended mode, we need to find a method of storing ESXi credentials.My least preferred option is to place the credentials into the script in clear text. My preferred method of using the Windows Credential Manager module (available here) unsurprisingly does not work when running PowerShell on Linux. Therefore we are going to have to go for a the middle of the road solution of storing the password as an encrypted string in a text file.To do this, we simply need to run the following which will output our encrypted password to the file /home/chris/cred.txt:$credential = Get-Credential $credential.Password | ConvertFrom-SecureString | Set-Content /home/chris/cred.txtTo “reconstitute” the password and combine with our user ID so that it can be used with the Connect-VIServer -Credential parameter, we need to include the following in our script:$Username = \"root\"$Credfile = \"/home/chris/cred.txt\"$Encrypted = Get-Content $Credfile | ConvertTo-SecureString$Credential = New-Object System.Management.Automation.PsCredential($Username, $Encrypted)Telegram AlertingOne thing we’ve not touched on in this series yet is the need for notifications and alerting. It is always good to know what is going on with the UPS and the Raspberry Pi during a power cut.In my solution script below, I’m going to use Telegram for notifications. Thinking here is that I will still receive the notifications during a power cut on my phone via 4 or 5G as at this point my non-UPS backed WiFi access points will also have had their power cut.If you’ve not seen my post on sending Telegram messages from PowerShell, what are you waiting for? It’s simple. :wink:Slight update to the Send-Telegram script to support Markdown formatting of messages:Filename:/home/chris/send-telegram2.ps1 #! /usr/bin/pwshParam([Parameter(Mandatory=$true)]$Message,[Parameter(Mandatory=$false,HelpMessage=\"Specify Markdown or HTML formatting (Default = Markdown)\")][string]$ParseMode = \"Markdown\")$Telegramtoken = \"&lt;TELEGRAM TOKEN&gt;\"$Telegramchatid = \"&lt;TELEGRAM CHAT ID&gt;\"# ================================$payload = @{\"chat_id\" = $Telegramchatid;\"text\" = $Message\"parse_mode\" = $ParseMode}# ================================[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12$Response = Invoke-RestMethod `-Uri (\"https://api.telegram.org/bot{0}/sendMessage\" -f $Telegramtoken) `-Method Post `-ContentType \"application/json\" `-Body (ConvertTo-Json -Compress -InputObject $payload) `-ErrorAction StopDon’t forget to mark the script executable using chmod +x send-telegram2.ps1The Shut Down ScriptRather than post script snippets and talking about them for sections and sections, here is the complete script:Filename: /home/chris/shutdown.ps1 #! /usr/bin/pwsh# == Complete These ==============$ESXi = \"esxi-server.local\"$Username = \"root\"$Credfile = \"/home/chris/cred.txt\"$Waittime = \"120\" # ================================Function Send-Update { Param($Message) $time = (get-date -Format \"dd/MM/yy HH:mm\") $status = \"*\" + $Message + \"* - $time\" /home/chris/send-telegram2 -Message $status -ParseMode Markdown}# ================================Import-Module VMware.PowerCLI$Encrypted = Get-Content \"$Credfile\" | ConvertTo-SecureString$Credential = New-Object System.Management.Automation.PsCredential($Username, $Encrypted)/home/chris/send-telegram2 -Message \"VM Shutdown Sequence Started. VMs to be Shutdown:\" -ParseMode MarkdownConnect-VIServer $ESXi -Credential $Credential$PoweredVMs = (Get-VM).where{$_.PowerState -eq 'PoweredOn'}Send-Update ($PoweredVMs.Name |Out-String)ForEach ($VM in $PoweredVMs){ Send-Update \"Shutting down $VM\" $VM | Shutdown-VMGuest -Confirm:$false &gt; $null $looptime = $Waittime do { sleep 10 $looptime = $looptime - 10 } until ((Get-VM $VM).PowerState -eq 'PoweredOff' -or $looptime -eq 0) Send-Update \"$VM is $((Get-VM $VM).PowerState)\"}$KillVMs = (Get-VM).where{$_.PowerState -eq 'PoweredOn'}If ($KillVMs){ ForEach ($VM in $KillVMs){ Send-Update \"Killing $VM\" Stop-VM -kill $VM -Confirm:$false }}Send-Update \"Shutting down $ESXi\"Stop-VMHost $ESXi -Force -Confirm:$falseDisconnect-VIServer * -confirm:$falseStop-ComputerDon’t forget to mark the script executable using chmod +x shutdown.ps1Calling the PowerShell Shutdown ScriptNext we need to configure calling the above PowerShell script from the apcups daemon:Filename: /etc/apcupsd/doshutdown #!/bin/sh# This shell script if placed in /etc/apcupsd will be called by /etc/apcupsd/apccontrol when the UPS is running on batteries # and one of the limits expires (time, run, load), this event is generated to cause the machine to shutdown.HOSTNAME=`hostname`MSG=\"$HOSTNAME UPS $1 calling for controlled shut down\"now=$(date +\"%d/%m/%y %H:%M\")now=\"$now\" pwsh -file /home/chris/send-telegram2.ps1 -Message \"&lt;b&gt;$now&lt;/b&gt; - UPS &lt;code&gt;${1}&lt;/code&gt; calling for control&gt;pwsh -file /home/chris/shutdown.ps1${SHUTDOWN} -h now \"apcupsd UPS ${1} initiated shutdown\"#( echo \"$MSG\" echo \" \" /sbin/apcaccess status) | $APCUPSD_MAIL -s \"$MSG\" $SYSADMINexit 0TestingRemarking out the shutdown commands and adjusting the timeout to 10 seconds per loop:Nice!Of course PoweredOn will read PoweredOff when VMs are actually shutdown and there won’t be as much VM killing going on (second screenshot), but you get the idea.Conclusion and Wrap UpThere we have it: UPS initiated ESXi shutdown handled by a Raspberry Pi!Bonus RoundsThere are several other event called scripts contained in /etc/apcupsd/ that can be modified to provide UPS visibility. For example:Filename: /etc/apcupsd/onbattery #! /usr/bin/pwsh$time = (get-date -Format \"dd/MM/yy HH:mm\")$status = \"*UPS Power failure - running on batteries!* - $time\"/home/chris/send-telegram2 -Message $status -ParseMode MarkdownFilename: /etc/apcupsd/offbattery #! /usr/bin/pwsh$time = (get-date -Format \"dd/MM/yy HH:mm\")$status = \"*UPS Power returned - running on mains power* - $time\"/home/chris/send-telegram2 -Message $status -ParseMode MarkdownA full list of supported events can be found in APCUPSD Manual - Customizing Event Handling.This post was a belated part 3 of a multipart series. Find the other parts here: Part 1: Hardware, Requirement, Software, Solution Part 2: Hardware Connectivity and Software Installation Part 3: This part - Scripting for the win… or should that be for the failure?-Chris" }, { "title": "vSphere Compliance with vRealize Operations and Tagging - Part 2", "url": "/posts/vsphere-compliance-with-vro-pt2/", "categories": "", "tags": "Pro-Tip, VMware, Deployment, ESXi, vRealize", "date": "2022-07-05 01:00:00 +0100", "snippet": "Last time we looked at regulatory compliance standards and benchmarks, vSphere tag creation and application and finally for the majority of the post at configuring vRealize Operations to continually monitor for system hardening standard / benchmark compliance.If you have not yet seen that post, catch up now. It’s a great read. :wink:As mentioned, this post is part 2 of a multipart series. Find the other parts here: Part 1: Creating Continual Regulatory Compliance) Part 2: This part: Monitoring and Reporting Regulatory ComplianceMonitoring ComplianceWe need a dashboard. Let’s create one! Luckily for us vRealize Operations (vRO) has just the thing.From the vRO console, select Visualise &gt; Dashboards and let’s search for compliance:Not sure why the built in compliance dashboard is deprecated, but hey lets use it as a base for a new custom dashboard anyway. Taking a look at the dashboard:Nice. Let’s clone the dashboard to create our own. Click Manage and filter on compliance to find the dashboard in the dashboard library:Use the three vertical dots to clone the dashboard:I’ll name my new dashboard PolarClouds CIS Security Compliance:Again, using the three vertical dots, let’s edit the PolarClouds CIS Security Compliance dashboard. I’m not going to go into super detail here as dashboards are a can be subject to personal taste, but here are the changes I’ve made (you are of course free to make your own!): Removed the vSphere and VM Compliance heat maps: Group the affected objects by “None”:As this is a small environment with eventually zero compliance issues, I’m happy to put the hopefully empty list on non-compliances right on my dashboard! I’ll rename the widget “Non-Compliant Objects” too.That’s it. I’ll save the dashboard and using the share button, setting the expiry to Never Expire, I’ll grab the link to my nice new dashboard:Lets take a look at the final dashboard:Happy with that. Yes, there is some hardening of the environment yet to do, I’ll forward the link to the security and compliance departments.Reporting ComplianceNext, let’s work on reporting. Reports are consist of one or more views, so we’ll work on creating our views first.For my report I’m going to include the following views: CIS Compliant Virtual Machines CIS Compliant ESXi Hosts CIS Compliant Virtual Switches CIS Compliant Virtual Switch Port Groups CIS Non-Compliant Virtual Machines CIS Non-Compliant ESXi Hosts CIS Non-Compliant Virtual Switches CIS Non-Compliant Virtual Switch Port Groups CIS Excluded Virtual Machines CIS Excluded ESXi Hosts CIS Excluded Virtual Switches CIS Excluded Virtual Switch Port GroupsSure twelve views is a lot (remember CIS does not harden vCenter), but through the power of cloning and tweaking the filters we really only have to create four views.ViewsVirtual MachinesFrom the vRO console, select Visualise &gt; Views &gt; Manage &gt; Add and let’s create a view to add to a report. I’ll call my view “PolarClouds CIS Compliant Virtual Machines” and set the description as “Virtual Machines with vSphere configuration compliant with CIS Hardening Standards”:Selecting step 2, lets create some views.Click + to add a view. We will name this first view PolarClouds CIS Compliant Virtual Machines and set the description ro Virtual Machines with vSphere configuration compliant with CIS Hardening Standards:Next, lets present some data in list form, so select List:Moving onto step 3, lets set our subjects as vCenter Adaptor &gt; Virtual MachineMoving onto step 4, lets find some data to populate our list with. When we find our property / metric, simply drag to add to the list:Label the Metric and add a sort order:The full list of VM properties and metrics I use is, along with their paths is: VM IP Address : Properties &gt; Summary &gt; Guest Operating System&gt;Guest OS IP Address VM Operating System : Properties &gt; Summary &gt; Guest Operating System &gt; Guest OS from Tools VM CIS Compliance : Metrics &gt; Badge &gt; Compliance (%)Next, lets filter to show only the VMs that are 100% compliant:The final configuration of the view:Finally click Save to save the view.Next we’ll create the CIS Non-Compliant Virtual Machines view.Clone the previously created view:Update Name and description:Select 4. DataChange compliance operator to is notAdd Properties &gt; vSphere Tag &gt; Current &gt; is not &gt; [&lt; Compliance-CIS-Excluded &gt;]:Finally save the view.Given that we know that we have some non-compliant VMs, we can preview the view. Select the Non-Compliant view from the Recents list, click Select preview source and select vCenter Adapter &gt; vSphere World . vSphere World. Looking good:Just our VM with a serial port!Finally lets clone and tweak the filter again to create our CIS Excluded Virtual Machines view. I’ve also removed the VM CIS Compliance column from the view.Using vSphere World as a preview source:Yep our two excluded VMs are listed. Hey presto we have our three VM views:ESXi HostsFrom the vRO console, select Visualise &gt; Views &gt; Manage &gt; Add and let’s create a view to add to a report. I’ll call my view “PolarClouds CIS Compliant ESXi Hosts” and set the description as “ESXi Hosts with vSphere configuration compliant with CIS Hardening Standards”.Again I shall configure presentation in list form and I’ll include the following properties and metrics: Host IP Address : Properties &gt; Network &gt; Management Address Host Operating System : Properties &gt; System &gt; Product String Host Version - Build Number: Properties &gt; Summary &gt; Version Host CIS Compliance : Metrics &gt; Badge &gt; Compliance (%)Again we’ll clone and set our filters accordingly to create the three views: CIS Compliant ESXi Hosts Filter : Metrics &gt; Badge &gt; Compliance (%) &gt; Current &gt; is &gt; 100 CIS Non-Compliant ESXi Hosts Filter : Metrics &gt; Badge &gt; Compliance (%) &gt; Current &gt; is not &gt; 100 And : Properties &gt; Summary &gt; vSphere Tag &gt; Current &gt; is not &gt; [&lt; Compliance-CIS-Excluded &gt;] CIS Excluded ESXi Hosts Filter : Properties &gt; Summary &gt; vSphere Tag &gt; Current &gt; is &gt; [&lt; Compliance-CIS-Excluded &gt;] Virtual SwitchesAgain three new views with the following properties and metrics: Switch Version - Build Number : Properties &gt; Summary &gt; Version Switch CIS Compliance : Metrics &gt; Badge &gt; Compliance (%)Clone and set our filters accordingly to create the three views: CIS Compliant Virtual Switches Filter : Metrics &gt; Badge &gt; Compliance (%) &gt; Current &gt; is &gt; 100 CIS Non-Compliant Virtual Switches Filter : Metrics &gt; Badge &gt; Compliance (%) &gt; Current &gt; is not &gt; 100 And : Properties &gt; Summary &gt; vSphere Tag &gt; Current &gt; is not &gt; [&lt; Compliance-CIS-Excluded &gt;] CIS Excluded ESXi Hosts Filter : Properties &gt; Summary &gt; vSphere Tag &gt; Current &gt; is &gt; [&lt; Compliance-CIS-Excluded &gt;] Virtual Switch Port Groups Finally three more views with the following properties and metrics: Port Group VLAN ID : Properties &gt; Configuration &gt; Policies &gt; Security &gt; VLAN ID Port Group VLAN Trunk : Properties &gt; Configuration &gt; Policies &gt; Security &gt; VLAN trunk range Port Group CIS Compliance : Metrics &gt; Badge &gt; Compliance (%)Clone and set our filters accordingly to create the three views: CIS Compliant Virtual Switch Port Groups Filter : Metrics &gt; Badge &gt; Compliance (%) &gt; Current &gt; is &gt; 100 CIS Non-Compliant Virtual Switch Port Groups Filter : Metrics &gt; Badge &gt; Compliance (%) &gt; Current &gt; is not &gt; 100 And : Properties &gt; Summary &gt; vSphere Tag &gt; Current &gt; is not &gt; [&lt; Compliance-CIS-Excluded &gt;] CIS Excluded Virtual Switch Port Groups Filter : Properties &gt; Summary &gt; vSphere Tag &gt; Current &gt; is &gt; [&lt; Compliance-CIS-Excluded &gt;] Phew! Done!ReportsNow that we have sliced and diced out data into views, lets bundle the results into a report for review and action.From the vRO console, select Visualise &gt; Reports &gt; Manage &gt; Add and let’s create a report. I’ll call my report “PolarClouds vSphere Estate CIS Compliance” and set the description as “Status of vSphere CIS Compliance across the PolarClouds vSphere Estate”Next, add the twelve views previously created:Finally, I’ll enable PDF and CSV formats, add a cover page, table of contents and a footer.Save, find in the list and run the report against vSphere World:And here is the report:Grab your copy of the report: PDF [CSV])As you can see, I added a slightly tweaked version of the dashboard to the report too, thus making a nice summary page :sunglasses:Conclusion and Wrap UpSo there we have it.In this post we looked at creating dashboards, views and reports to publicise our example PolarClouds lab environment CIS compliance and and non-compliances further.All that is left is to harden the environment keeping an eye on our dashboard and reports as we go.As you will have seen over the course of this series, vRealize Operations is able to assist with meeting and reporting security compliance across the vSphere estate and ensuring that compliance remains in place via dashboards and reports.Chris’ Final Thought 1Trust, but verify. Compliance standards can and will change.Therefore don’t take VMware’s vRO compliance as the final word for a compliant environment. Third party compliance scanning solutions such as those available from Tenable and Qualys exist for a reason.Chris’ Final Thought 2Usual disclaimer applies.And that’s it!As mentioned, this post is part 2 of a multipart series. Find the other parts here: Part 1: Creating Continual Regulatory Compliance) Part 2: This part: Monitoring and Reporting Regulatory ComplianceAs I said at the end of part 1:Sure compliance is a dry and often a difficult subject to crack, however hopefully with the use of a automated and continuous monitoring tool such as vRealize Operations, we can ensure that our vSphere environment is always meeting its required compliance standard, whatever standard that may be.-Chris" }, { "title": "vSphere Compliance with vRealize Operations and Tagging", "url": "/posts/vsphere-compliance-with-vro/", "categories": "", "tags": "Pro-Tip, VMware, Deployment, ESXi, vRealize", "date": "2022-06-28 01:00:00 +0100", "snippet": "In these days of anywhere computing, one of the tools in the arsenal of the good guys is system hardening. But what is system hardening?System hardening is defined as the practice of reducing a system’s vulnerability by reducing its attack surface. Through a reduced attack surface, there is a lower risk of data breaches, unauthorized access, system hacking, or malware infection.Hardening may involve a reduction in attack surface through cutting unnecessary services or processes. Therefore for most environments a level of system hardening is required, but how much system hardening is required? How are systems hardened? Are there any system hardening compliance standards or guides that we could follow? Which standard best fits my scenario?As with so may things in life, there are options. How much hardening depends on your risk appetite. Spoiler Alert: a list of compliance standards is included later on in this post (/posts[tl,dr])For example, two popular hardening benchmarks are CIS and DISA STIG. These are available: CIS Benchmarks: Here DISA STIG Benchmarks: HereObjectivesWhilst vRealize Operations (vRO) can be integrated into VMware Cloud on AWS, Azure VMware Solution, Google Cloud VMware Engine as well as native Azure and AWS environments, in this post we shall address the hardening of a Software Defined Data Center on premises vSphere environment.In so doing, we shall be system hardening the following components that make up a vSphere environment: ESXi Hosts vCenter Servers Distributed Switches Distributed Switch Ports vSAN (if deployed) NSX-T (if deployed) Virtual Machine ConfigurationsWe will NOT be system hardening the guest operating systems running inside the virtual machines. These operating systems have their own system hardening standards / benchmarks so are therefore outside the scope of this article.What is vRealize Operations?From the VMware marketing blurb:VMware vRealize Operations provides self-driving IT Operations Management across private, hybrid and multi-cloud environments with a unified operations platform that delivers continuous performance, capacity and cost optimization, intelligent remediation and integrated compliance through AI/ML and predictive analytics.Chris’ take:vRO monitors environments for alerts, symptoms and conditions. Compliance standards loaded into vRO are a set of alerts where by an object is not configured to satisfy the condition of the alert will cause the alert to be flagged.vSphere ConfigurationAs discussed, in this post we shall address the hardening of a Software Defined Data Center on premises vSphere environment.We will be using the following lab environment: vSphere 7 update 3 - Single vCenter and single ESXi host vRO 8.6.3 - Single VM, extra smallNo licences have been procured for this environment. All software is in evaluation mode.Networking:Yep, nothing complicated at all. Much, much larger environments are available!Why vSphere Tags?When it comes to compliance, much as we would like it, occasionally (often) there are objects that at any one particular point in time are not required to be compliant with the system hardening benchmark in use across the environment. For example we may be deploying a an isolated test/dev environment or a quick temporary virtual machine, network port group, whatever. At this point in time these do not need to be compliant. Compliance may/can come later.Having these known non-compliant environments being continually flagged in vRO is undesirable and may obscure issues elsewhere with objects that absolutely need to be compliant (think: “was it six or seven VMs and two or three port groups that we don’t need to care about compliance failures on?!?”).Therefore, how can we “tune out the cruft” from vRO so that we can concentrate on the rest of the environment that absolutely needs to be compliant?Simple: Configure compliance monitoring so that ALL objects need to be compliant by default Employ a vSphere tag to mark objects that don’t need to be compliant Manage by exceptionConfigure vSphere TagsLet’s setup our vSphere tags for our compliance exceptions.From the vSphere Client, select Menu &gt; Tags &amp; Custom Attributes &gt; Tags and Categories. From here we will create a new tag category named Compliance:Next, we need to create a tag that should be applied to the vSphere objects that should be excluded from compliance. Select Menu &gt; Tags &amp; Custom Attributes &gt; Tags and Tags:Apply vSphere TagsWithin my test environment, I want to CIS compliance scan everything except the following two VMs: WIN-2022 - My Windows 2022 test/dev VM vCLS-386d4abf-c432-4d1f-a4a2-c6355100f4b4 - the vSphere Cluster Services VM (see here for details)Find the VM Tags dialogue:Apply the tag:Confirm application:To confirm which objects have the tag applied and which do not, simply search for the tag in the inventory and select Objects:This list can be then be exported and provided to my security/compliance department as proof of those objects NOT in compliance with the hardening applied across the rest of the environment.vRealize Operations ConfigurationI won’t cover the deployment of the vRealize Operations appliance here. Should you need further info, see Deployment of vRealize Operations and the vRealize Operations Sizing Tool.To integrate vRO with vCenter, logon to vRO with the admin account, select Data Sources &gt; Integrations &gt; Add Account &gt; vCenter and add your vCenter details.Once vCenter has been integrated, you should see the following:Activating Compliance Standard to Apply to vSphereNext we need to select a compliance standard baseline to which we require our environment to conform to. From the vRealize Operations console, select Optimise &gt; Compliance. As you can see from below, there are several built in Regulatory Standards / Benchmarks available to choose from. These include: CIS Security Standards DISA Security Standards FISMA Security Standards HIPAA Compliance ISO Security Standards PCI Security StandardsAs can be seen below:In the following example we will be using the CIS Security Standard to harden our vSphere environment.In the CIS Security Standard option box, select Activate from Repository, Activate and Yes to activate the CIS standard. Confirm CIS compliance integration has been installed:Do not activate the standard just yet. We will handle activation later.Configuring a Compliance Standard to Apply to vSphereAs discussed above, given that vRO operates via alerting, lets go find our newly downloaded compliance alerts. From the vRO console, select Configure &gt; Alerts &gt; Alert Definitions and filter by compliance standard activated (in my case CIS):As can be seen in the case of CIS, there are four alerts that have been created.Notice that there is no alert configuration for vCenter server. The compliance standard chosen - CIS - does not contain hardening standards for vCenter. Others hardening compliance standards such as STIG certainly do contain hardening standards for vCenter.ESXi Host is Violating CIS Alert DefinitionSo that we may always have untouched alert definitions to go back to later should we need to, we will clone the alert definitions to create our own.Using the three dots to the right of each of the alert definitions, select clone:To make my alert definitions easier to find in the future, I shall suffix my alert definitions with “PolarClouds”:Click Next. Here we can see the individual tests that constitute the “violating CIS” vRO alert:From here, we can remove any unwanted symptoms that we do not want to test for. Typically I remove the following tests: Use Active Directory for local user authentication 1 Enable vSphere Authentication Proxy when adding hosts to Active Directory 1 Enable bidirectional CHAP authentication for iSCSI traffic 21 Whilst I agree AD integration is something that should be considered for ease of administration, in my experience it is not something regularly implemented. From a 10,000 foot view, I would argue that Active Directory is a larger attack vector than ESXi.2 I’m not using iSCSI in my lab.Use the X to remove the unwanted symptoms:Click Next &gt; Next, ensure no policies are selected to be enabled (again we will do this later) and finally Create to create the new PolarClouds ESXi Host is violating CIS policy.Virtual Machine is Violating CIS Alert DefinitionRepeat above clone and modification action for the Virtual Machine is violating CIS alert definition. For the PolarClouds Virtual Machine is violating CIS alert definition, I shall remove the following symptoms: CD-ROM connected (5.5 Hardening Guide) 1 VGA only mode is not enabled (5.5 Hardening Guide) 2 USB controller connected (5.5 Hardening Guide) 11 vSphere 7 CIS benchmark v1.1.0, section 8.3.1 discusses “disabling unnecessary system components”. CD-ROM drives and USB adapters are necessary. Some methods of VMtools updates are not possible without a CD-ROM.2 According to latest vSphere 7 CIS benchmark (v1.1.0) this test has been removedClick Next &gt; Next, ensure no policies are selected to be enabled (again we will do this later) and finally Create to create the new PolarClouds Virtual Machine is violating CIS policy.vSphere Distributed Port Group is Violating CIS Alert DefinitionRepeat above clone and modification action for the vSphere Distributed Port Group is violating CIS alert definition. For the PolarClouds vSphere Distributed Port Group is violating CIS, you also need to set the Base Object Type to vCenter Adapter &gt; vSphere Distributed Port Group and Alert Type and Subtype to Network: Compliance:Out of the box at the time of writing, the VMware CIS template has no symptoms set for this alert. Therefore for this alert rather than removing symptoms we will be adding them. This is simple to do.Select Symptoms in the right hand pane of the Symptoms / Conditions dialogue and use the filter to find the symptoms to add:Once a symptom is found, use drag and drop to add the symptom to the alert.For the PolarClouds vSphere Distributed Port Group is violating CIS alert I shall add the following and the set is met when Any of the symptoms / conditions are true: vNetwork.reject-forged-transmit-dvportgroup - The Forged Transmits policy is not set to reject 1 vNetwork.reject-mac-changes-dvportgroup - The MAC Address Changes policy is not set to reject 2 vNetwork.reject-promiscuous-mode-dvportgroup - The Promiscuous Mode policy is not set to reject 3 vNetwork.restrict-port-level-overrides - Port-level configuration VLAN overrides on VDS is not restricted 41 vSphere 7 CIS benchmark v1.1.0, section 7.12 vSphere 7 CIS benchmark v1.1.0, section 7.23 vSphere 7 CIS benchmark v1.1.0, section 7.34 vSphere 7 CIS benchmark v1.1.0, section 7.8My PolarClouds vSphere Distributed Port Group is violating CIS alert Symptoms now resembles the following:Click Next &gt; Next, ensure no policies are selected to be enabled (again we will do this later) and finally Create to create the new PolarClouds vSphere Distributed Port Group is violating CIS policy.vSphere Distributed Virtual Switch is Violating CIS Alert DefinitionRepeat above clone and modification action for the vSphere Distributed Virtual Switch is violating CIS alert definition. For the PolarClouds vSphere Distributed Virtual Switch is violating CIS alert definition, I will go with the defaults, no symptom modifications required:Click Next &gt; Next, ensure no policies are selected to be enabled (again we will do this later) and finally Create to create the new PolarClouds vSphere Distributed Virtual Switch is violating CIS.Alert Definition Wrap UpJust to double check then, all in all we have four custom CIS policies:To be 100% above board, submit details of the tests removed along with reasons for removal to your compliance and/or security department(s) for safe keeping. These will need logging as exceptions to the selected system hardening benchmark, in our case CIS.Activating Alert PoliciesSo let’s active our custom CIS policies. From the vRO console, select Configure &gt; Policies &gt; Add. I shall name my policy PolarClouds CIS Compliance Policy and I shall inherit from Base Settings:After clicking Create Policy, lets add our custom alert definitions. Click Alerts and Symptoms and lets filter on “CIS” to see both the default and our custom PolarClouds CIS alert definitions:Using the drop downs, enable the PolarClouds policies:Finally click Save.Custom GroupsSo that we can leverage our vSphere tags for compliance scanning, we need to create some custom groups in vRO.From the vRO console, select Environment &gt; Custom Groups &gt; Add. I shall name my custom group PolarClouds CIS Compliance Group.The group type will be Environment and the policy will be our previously created PolarClouds CIS Compliance Policy. I shall tick Keep group membership up to date.For membership criteria, I shall select object type vCenter Adapter &gt; Virtual Machine, Properties, Summary &gt; vSphere Tag, does not contain and [&lt; Compliance-CIS-Excluded &gt;]:Add another criteria set and repeat for vCenter Adapter &gt; Host System, vSphere Distributed Port Group and vSphere Distributed Switch (you may need to copy and paste in [&lt; Compliance-CIS-Excluded &gt;] ):Let’s preview our group membership:We have a distributed switch, some port groups, a VM and an ESXi host in our group.Notice that the vCLS and Win-2022 VMs are not listed in our custom group as these both have the CIS-Excluded vSphere tag applied to them. Nice!Close the preview and OK the group.Custom Compliance BenchmarkFrom the vRO console, select Optimise &gt; Compliance &gt; Add Custom Compliance &gt; Create a new Custom Benchmark. I shall name my benchmark PolarClouds CIS Compliance:I shall select my four PolarClouds alert definitions:Finally I shall enable PolarClouds CIS Compliance Policy:Once complete the initial assessment should begin:vRealize Operations vSphere CIS Compliance ResultsSo after all that configuration, let’s see where we need to harden our vSphere environment. From the vRO console, select Optimise &gt; Compliance &gt; Custom Benchmark - in my case PolarClouds CIS Compliance:OK, so one out of three isn’t bad! Clicking on the alerts allows us to dig into the detail:OK, so the ESXi host has five compliance failures.My Distributed Port PG-TEST group has promiscuous mode enabled.And finally some doughnut has added a serial port to a VM. :doughnut: :grin:Conclusion and Wrap UpMuch as I try not to, we are going to have to call a temporary stop to proceedings here.In this post we looked at regulatory compliance standards and benchmarks, vSphere tag creation and application and finally (for the majority of the post) at configuring vRealize Operations to continually monitor for system hardening benchmark compliance.Next time we will look at creating a dashboards and reports to publicise our example PolarClouds lab environment CIS compliance and and non-compliances further.Sure compliance is a dry and often a difficult subject to crack, however hopefully with the use of a automated and continuous monitoring tool such as vRealize Operations, we can ensure that our vSphere environment is always meeting its required compliance standard, whatever standard that may be.This post is part 1 of a multipart series. Find the other parts here: Part 1: This part: Creating Continual Regulatory Compliance Part 2: Monitoring and Reporting Regulatory Compliance)-Chris" }, { "title": "Rubrik Technical Professional", "url": "/posts/rubrik-technical-professional/", "categories": "", "tags": "Rubrik", "date": "2022-06-22 01:00:00 +0100", "snippet": "Yup, that’s right, yours truly is now a Rubrik Technical Professional!The Rubrik Technical Professional (RTP) accreditation training prepares technical pre-sales professionals to demonstrate their ability to build innovative data management solutions across Rubrik Rubrik Cloud Data Management (CDM) and Polaris platforms both on-premises and in the cloud.Isn’t Rubrik a backup product?Historically yes, the Rubrik Cloud Data Management (CDM) product is an on premisses and cloud backup and recovery platform, however the Rubrik product suite and hence the RTP qualification has grown to include the Rubrik Polaris platform.Rubrik Polaris includes the following:RadarRubrik Polaris Radar helps increase resiliency against ransomware by making it faster and easier to recover from an attack. Radar also helps to recover faster by providing a simple, intuitive user interface that allows for quick restores to the most recent clean state with minimum downtime. It increases intelligence by using machine learning to actively monitor and generate alerts for anomalous behaviour, like ransomware. To accelerate the discovery of an attack’s impact, Radar provides insight into how your data changed at the time of the event. Further reading…SonarAs organizations adopt cloud, they grapple with massive data fragmentation, making it impossible to know where sensitive data resides. At the same time, the increasing risk of data privacy breaches and non-compliance with regulations can impose serious financial penalties. Sensitive Data Discovery is a SaaS application that discovers, classifies, and reports on sensitive data without any impact to production. By leveraging your existing Rubrik deployments, users get up and running in just a few minutes with zero additional infrastructure required.Further reading…-Chris " }, { "title": "UPS Triggered Shut Down of ESXi from Raspberry Pi - Part 2", "url": "/posts/esxi-rpi-ups-pt2/", "categories": "", "tags": "Pro-Tip, VMware, Deployment, ESXi, Linux", "date": "2021-05-04 01:00:00 +0100", "snippet": "Last time we looked at what needs to happen should we loose the input mains electricity supply to our newly acquired Uninterruptable Power Supply (UPS). For example during a power cut.We also got familiar with the hardware and software needed to action a controlled shutdown should it be required. If you’ve not seen that post, catch up now. It’s a great read. :wink:As mentioned, this post is part 2 of a multipart series. Find the other parts here: Part 1: Hardware, Requirement, Software, Solution) Part 2: This part - Connectivity and Software Installation Part 3: Scripting for the win… or should that be for the failure?)To recap, we are going to make our Raspberry Pi “the brains of the operation” in our solution.Solution (Refresher) Mains electricity fails… power cut! The UPS signals to the Raspberry Pi that there is a power cut The UPS signals its battery charge state to the Raspberry Pi The UPS battery charge falls below a predetermined threshold and signals this to the Raspberry Pi The Raspberry Pi runs a script to shut down all powered on VMs The Raspberry Pi runs a script to shut down the ESXi host The Raspberry Pi runs a script to shut itself down The UPS stops supplying power from battery and shuts down which also shuts down the modem, router and network switchLet’s get to it.Hardware ConnectivityLike this:Chris-CRAP-Cad :wink:&lt;/figure&gt; The UPS is connected to the incoming mains electricity supply The UPS and Raspberry Pi are connected via a USB cable All kit is powered via the UPSCheck Raspberry Pi + APC UPS ConnectivityAfter connecting the UPS and Raspberry Pi via a USB cable, lets check UPS to RPi USB connectivity:$ lsusbYep, one APC UPS found. So far, so good.Software InstallationInstall APC UPS Daemon (apcupsd)Next, lets install the APC UPS Daemon on the Raspberry Pi:$ sudo apt-get install apcupsdOnce installed, we need to configure apcupsd to work with our UPS. This is achieved via editing the /etc/apcupsd/apcupsd.conf config file:$ sudo nano /etc/apcupsd/apcupsd.confWithin the file you will find lots of comments detailing each configuration item. Rather than list the whole file comments and all, I’ve listed just our configuration items below:UPSNAME SMC1500IUPSCABLE usbUPSTYPE usbLOCKFILE /var/lockSCRIPTDIR /etc/apcupsdPWRFAILDIR /etc/apcupsdNOLOGINDIR /etcONBATTERYDELAY 6BATTERYLEVEL 10MINUTES 10TIMEOUT 0ANNOY 300ANNOYDELAY 60NOLOGON disableKILLDELAY 0NETSERVER onNISIP 127.0.0.1NISPORT 3551EVENTSFILE /var/log/apcupsd.eventsEVENTSFILEMAX 10UPSCLASS standaloneUPSMODE disableSTATTIME 0STATFILE /var/log/apcupsd.statusLOGSTATS offDATATIME 0Next step is to mark apcupsd as configured:$ sudo nano /etc/default/apcupsdSet to equal yes:ISCONFIGURED=yesFinally lets restart the apcupsd service and test to see if apcupsd discovers our UPS:$ sudo apcupsd restart$ apcaccess statusNice:That is apcupsd daemon installed and working.Install PowerShell Core on Raspberry PiNext step is to install PowerShell Core.There are two packages that we need to install prior to downloading and extracting PowerShell: libssl1.0 and libunwind8.We then download a copy of PowerShell for ARM64 and extract.Finally we link the pwsh executable to /usr/bin so that it can be launched from any folder on the Raspberry Pi:$ sudo apt-get install '^libssl1.0.[0-9]$' libunwind8 -y$ cd ~/$ wget https://github.com/PowerShell/PowerShell/releases/download/v7.1.3/powershell-7.1.3-linux-arm64.tar.gz$ mkdir ~/powershell$ tar -xvf ./powershell-7.1.3-linux-arm64.tar.gz -C ~/powershell$ sudo ln -s ~/powershell/pwsh /usr/bin/pwshOK, lets launch PowerShell to see if it runs OK:$ pwshYep that works!Install VMware PowerCLI on Raspberry PiOK, lets next install PowerCLI using the PowerShell Install-Module cmdlet and set our PowerCLI configuration options:$ sudo pwshInstall-Module VMware.PowerCLI -Scope AllUsersSet-PowerCLIConfiguration -Scope AllUsers -InvalidCertificateAction Ignore -ParticipateInCEIP $false -Confirm:$falseFinally, lets take PowerCLI for a little spin and connect to a test lab ESXi host:Boom! That’s the end of our software installations :smile:Conclusion and Wrap UpThat’ll do it for part two.In this post we hooked up our hardware, checked UPS and Raspberry Pi connectivity via USB and installed all of our required software. Next time we’ll look at getting everything to work nicely together.This post is part 2 of a multipart series.Find the other parts here: Part 1: Hardware, Requirement, Software, Solution) Part 2: This part - Connectivity and Software Installation Part 3: Scripting for the win… or should that be for the failure?)Look out for future parts coming soon!-Chris" }, { "title": "UPS Triggered Shut Down of ESXi from Raspberry Pi - Part 1", "url": "/posts/esxi-rpi-ups-pt1/", "categories": "", "tags": "Pro-Tip, VMware, Deployment, ESXi, Linux", "date": "2021-04-21 01:00:00 +0100", "snippet": "By the shear luck of being in the right place at the right time, I managed to get my hands on an APC Smart-UPS C1500 Uninterruptable Power Supply (UPS) for my home lab use.A UPS is a piece of hardware that will provide emergency power from batteries should the incoming mains electricity supply fail. Nice!However, depending upon the state of the UPS battery when the mains power fails and the power requirements of the infrastructure being supplied by the UPS, on battery runtimes can be variable.Because of this on battery runtime variability, it is necessary to have the UPS monitor its battery capacity and signal when the batteries reach a low level, assuming that the mains electricity supply has not returned yet. This signal can then be used to trigger an automated clean, controlled automated shut down of the protected infrastructure.Over the posts in this series I’ll put together a solution to monitor the UPS as well as handle UPS low battery level signalling and the clean automated shut down my infrastructure prior to the UPS batteries running out.This post is part 1 of a multipart series. Find the other parts here: Part 1: This part - Hardware, Requirement, Software, Solution Part 2: Hardware Connectivity and Software Installation) Part 3: Scripting for the win… or should that be for the failure?)HardwareLets look at list of hardware that I wish to run from the APC Smart-UPS C1500 UPS: One fibre broadband modem One router One 24 port network switch One Raspberry pi 4 One Dell R710 ESXi serverOf the above, the “thirstiest” device will be the Dell R710 ESXi server, typically pulling 150 Watts on average. Therefore this needs to be the device that is shut down first. Also, of all the infrastructure being protected by the UPS, it is the data in VMs run on the ESXi server that I wish to protect the most. There is also a small amount of data on the Raspberry Pi that I would also like to protect.The other devices (modem, router, switch) hold no data and are happy to be powered off without the need to be shut down first.RequirementUnfortunately, ESXi’s mission is to be a hypervisor not a UPS monitor; there is no such capability available within ESXi. Therefore UPS monitoring needs to be handled elsewhere.Handling this on a VM run on the ESXi host is tricky as the VM will need to signal to the host to shut down but for the host to shut down all VMs need to be shut down first. Hmmm chicken, egg, egg, chicken. Let’s give the job to the Raspberry Pi. :thumbsup:SolutionPulling this together then: Mains electricity fails… power cut! The UPS signals to the Raspberry Pi that there is a power cut The UPS signals its battery charge state to the Raspberry Pi The UPS battery charge falls below a predetermined threshold and signals this to the Raspberry Pi The Raspberry Pi runs a script to shut down all powered on VMs The Raspberry Pi runs a script to shut down the ESXi host The Raspberry Pi runs a script to shut itself down The UPS stops supplying power from battery and shuts down which also shuts down the modem, router and network switchSoftwareTo achieve the above, we will need some software to help make this happen: APC UPS Daemon (apcupsd) PowerShell Core VMware PowerCLI (Optional) TelegramNot included above, but taken as a given are the operating systems running on the hardware: Raspberry Pi: Ubuntu 20.04 LTS (Raspbian would work too) Dell R710: VMware ESXi 6.7 (or later)Let’s take a closer look at the other software.APC UPS Daemon (apcupsd)APC UPS Daemon is a program for monitoring UPSes. It runs on Linux, Mac OS/X, Win32, BSD, Solaris, and other OSes. It is open source and available in most Linux distribution software repositories.In our solution we will be running APC UPS Daemon on the Raspberry Pi.PowerShell CoreYep, that’s correct, PowerShell Core runs on Linux too! In our solution we will be running PowerShell Core on the Raspberry Pi.Question: Why not use a “built in” Linux scripting solution such as BASH or Perl etc?Yep, whilst VMware release an SDK for Perl, I’m personally not as familiar with it as I am with PowerShell. PowerShell Core is available for Linux, so why not just use that instead? Also, having PowerShell script cross operating system portability might be an important consideration in the future too.VMware PowerCLIVMware PowerCLI is a PowerShell based command line and scripting interface for managing VMware vSphere.In our solution we will be running PowerCLI on the Raspberry Pi.(Optional) TelegramTelegram is a cloud based messaging solution. In this solution we will be sending Telegram messages from PowerShell for alerting and status updates.For further details on sending of Telegram messages from PowerShell, take a look at Send Telegram Messages from PowerShell it’s a great read! :wink:In our solution we will be sending Telegram messages from the Raspberry Pi.Conclusion and Wrap UpThat’ll do it for part one.In this post we gathered our requirements, put a solution together to meet those requirements and took a look at our hardware and our software. Next time we’ll look at installing the required software and getting everything to work nicely together.This post is part 1 of a multipart series.Find the other parts here: Part 1: This part - Hardware, Requirement, Software, Solution Part 2: Hardware Connectivity and Software Installation) Part 3: Scripting for the win… or should that be for the failure?)Look out for future parts coming soon!-Chris" } ]
